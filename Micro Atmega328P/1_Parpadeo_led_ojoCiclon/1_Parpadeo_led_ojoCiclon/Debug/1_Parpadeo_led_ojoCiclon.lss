
1_Parpadeo_led_ojoCiclon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000178  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076a  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000682  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void)
{
    //PROGRAMACIÓN DE LA MÁQUINA: En este se indica por medio de los registros de función específica, los pines de los puertos B, C y D que serán entradas o salidas.
    //0: Pin como entrada
    //1: Pin como salida
    DDRB = 0xFF; //Todos los pines del puerto B son salidas
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
    DDRD = 0xFF; //Todos los pines del puerto D son salidas
  aa:	8a b9       	out	0x0a, r24	; 10
	esto lo que hace es agarrar una variable y darle un valor de 1, multiplicarlo por 2 hasta que su valor llegue a 80, cada vez que llgue a 80, se pone una bandera en 1
	para indicar que se llegó al 80 y cuando valga esa bandera 1, ya no se multiplicará el número sino que se va a dividir hasta que llegue a cero y cuando alcance el cero
	la bandera igual volverá a valer 0.*/
    while (1)
    {
		if (d == 1){
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	59 f5       	brne	.+86     	; 0x110 <main+0x6a>
			for (x = 0; x < 8; x++){
  ba:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <x+0x1>
  be:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <x>
  c2:	1f c0       	rjmp	.+62     	; 0x102 <main+0x5c>
				PORTD = d;
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c8:	8b b9       	out	0x0b, r24	; 11
				d = d*2;
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x3e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x48>
  ee:	00 00       	nop
	para indicar que se llegó al 80 y cuando valga esa bandera 1, ya no se multiplicará el número sino que se va a dividir hasta que llegue a cero y cuando alcance el cero
	la bandera igual volverá a valer 0.*/
    while (1)
    {
		if (d == 1){
			for (x = 0; x < 8; x++){
  f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <x>
  f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <x+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <x+0x1>
  fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
 102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <x>
 106:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <x+0x1>
 10a:	08 97       	sbiw	r24, 0x08	; 8
 10c:	dc f2       	brlt	.-74     	; 0xc4 <main+0x1e>
 10e:	ce cf       	rjmp	.-100    	; 0xac <main+0x6>
				PORTD = d;
				d = d*2;
				_delay_ms(500);
			}
		} 
		else if (d > 127){
 110:	80 38       	cpi	r24, 0x80	; 128
 112:	91 05       	cpc	r25, r1
 114:	5c f2       	brlt	.-106    	; 0xac <main+0x6>
			for (b = 8; b > 0; b--){
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 11e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 122:	20 c0       	rjmp	.+64     	; 0x164 <main+0xbe>
				d = d/2;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	99 23       	and	r25, r25
 12e:	0c f4       	brge	.+2      	; 0x132 <main+0x8c>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				PORTD = d;
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	89 e6       	ldi	r24, 0x69	; 105
 144:	98 e1       	ldi	r25, 0x18	; 24
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xa0>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xaa>
 150:	00 00       	nop
				d = d*2;
				_delay_ms(500);
			}
		} 
		else if (d > 127){
			for (b = 8; b > 0; b--){
 152:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 156:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 16c:	18 16       	cp	r1, r24
 16e:	19 06       	cpc	r1, r25
 170:	cc f2       	brlt	.-78     	; 0x124 <main+0x7e>
 172:	9c cf       	rjmp	.-200    	; 0xac <main+0x6>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
