
10_Convertidor_Analogico_Digital.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000692  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000249  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ba  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_21>:
parámetro a la función el vector INT0_vect para que ejecute la acción cuando la interrupción externa INT0 sea detonada y se debe hacer una función ISR aparte para manejar la 
acción que detona la interrupción externa INT1.*/
/*Las acciones de las interrupciones externas deben ser descritas en una función fuera del método main, estas reciben como parámetro lo siguiente:
	- ADC_vect: Interrupción activada por la conversión ADC en el Arduino.*/
//ISR INTERRUPCIONES POR ADC:
ISR(ADC_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
	/*Almacenamiento del número binario resultado de la conversión analógica digital que representa la amplitud de tensión en la señal analógica: El resultado de la conversión 
	ACD se guarda en un número binario de 10 bits, estos a fuerza se deben guardar en dos registros distintos llamados ADCH y ADCL, donde el bit ADLAR indica el orden en el 
	que se guardan, pero normalmente cuando ADLAR = 0, se acomodan de la siguiente manera:
		- ADCH: Guarda los 2 bits más significativos de los 10 bits resultantes de la conversión ADC.
		- ADCL: Guarda los 8 bits menos significativos de los 10 bits resultantes de la conversión ADC.*/
	PORTB = ADCL;			//Asingación de los 2 bits más significativos de la conversión ADC.
  90:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  94:	85 b9       	out	0x05, r24	; 5
		- ADEN: Bit que activa o desactiva el ADC del microcontrolador:
			- ADEN = 1: Activación de la conversión ADC.
				- ADSC = 1: Iniciación de la conversión, mientras el bit del registro se mantenga en su valor uno lógico, la conversión ADC sigue en proceso.
				- ADSC = 0: Fin de la conversión, cuando se acabe la conversión ADC el bit cambiará a cero lógico por sí solo.
			- ADEN = 0: Desactivación de la conversión ADC.*/
	ADCSRA |= (1<<ADSC); //Iniciación de la conversión ADC; ADSC = 1
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
}
  a0:	ff 91       	pop	r31
  a2:	ef 91       	pop	r30
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:
{
	/*CLI: Cuando se activa una CLI interruption, automáticamente el bit 7 del status register que es GI (General Interruption) se convierte en 0 lógico, lo que convierte a 
	las interrupciones en MI (Maskable Interrupt), esto en términos más simples significa que las interrupciones están activas:
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	cli(); //Evita cualquier interrupción que entre mientras ya se está ejecutando una o antes de programar la máquina, ya que termine, permite la ejecución de interrupciones.
  b0:	f8 94       	cli
	
	
	//PROGRAMACIÓN DE LA MÁQUINA: Se indica por medio de los registros de función específica si los pines de los puertos serán entradas o salidas o el estado de los timers.
	//0: Pin como entrada
	//1: Pin como salida
	DDRB = 0xFF; //Todos los pines del puerto B son salidas a leds.
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; //Todos los pines del puerto C son entradas disponibles para el ADC.	
  b6:	17 b8       	out	0x07, r1	; 7
		mismo microcontrolador cuando se utiliza en condiciones de temperatura extrema, pero su desventaja es que no es muy preciso, teniendo una sensibilidad de ±10°C.
			- MUX3 = 1
			- MUX2 = 0
			- MUX1 = 0
			- MUX0 = 0*/
	ADMUX |= (0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0); //ADC0: Pin A0 (PC0) como entrada analógica; MUX3 = 0, MUX2 = 0, MUX1 = 0, MUX0 = 0
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	85 60       	ori	r24, 0x05	; 5
  c0:	80 83       	st	Z, r24
			- REFS0 = 0
		- Referencia Analógica Interna: Es una referencia incorporada dentro del microcontrolador ATMEGA328P que tiene valor de 1.1 V. Es muy estable, pero se debe lograr que 
		  la señal de entrada externa tenga una amplitud máxima de 1.1 V, esto se puede lograr con un divisor de tensión.
			- REFS1 = 1
			- REFS0 = 1*/
	ADMUX |= (1<<REFS1)|(1<<REFS0); //Referencia Analógica Interna; REFS1 = 1, REFS0 = 1
  c2:	80 81       	ld	r24, Z
  c4:	80 6c       	ori	r24, 0xC0	; 192
  c6:	80 83       	st	Z, r24
			- ADCH: Guarda los 2 bits más significativos de los 10 bits resultantes de la conversión ADC hasta la derecha de su registro.
			- ADCL: Guarda los 8 bits menos significativos de los 10 bits resultantes de la conversión ADC.
		- ADLAR = 1
			- ADCH: Guarda los 8 bits más significativos de los 10 bits resultantes de la conversión ADC.
			- ADCL: Guarda los 2 bits menos significativos de los 10 bits resultantes de la conversión ADC hasta la izquierda de su registro.*/
	ADMUX |= (1<<ADLAR); //ADCL: Guarda los 8 bits menos significativos de los 10 bits resultantes de la conversión ADC; ADLAR = 0
  c8:	80 81       	ld	r24, Z
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	80 83       	st	Z, r24
			- ADATE = 1; Activación del ADC de aproximaciones sucesivas.
		- El bit ADIE activa o desactiva las interrupciones causadas por el convertidor ADC, que se activará en una función ISR (Interruption Service Routine), usada para 
		manejar interrupciones en general, utilizando el vector ADC_vect como su parámetro:
			- ADIE = 0; El ADC trabaja sin realizar ninguna interrupción.
			- ADIE = 1; El ADC puede realizar interrupciones, causadas cuando termine de realizar la conversión de una señal analógica a digital.*/
	ADCSRA |= (1<<ADEN)|(0<<ADATE)|(1<<ADIE); //Conversión ADC activada, ADEN = 1; Activación del ADC de aproximaciones sucesivas, ADATE = 1; ADC con interrupciones, ADIE = 1
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 68       	ori	r24, 0x88	; 136
  d6:	80 83       	st	Z, r24
			- ADPS0 = 0
		- Factor de división 128: Se divide la señal del reloj de 16X10^6 Hz:	f_muestreo = fmicro / factor_division = 16X10^6 / 128 = 1X10^6 =	0.125 MHz =	125 kHz
			- ADPS2 = 1
			- ADPS1 = 1
			- ADPS0 = 1*/
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Factor de división de 128, frecuencia de 125 kHz; ADPS2 = 1, ADPS1 = 1, ADPS0 = 1
  d8:	80 81       	ld	r24, Z
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	80 83       	st	Z, r24
		- Temporizador T1 por captura de evento: La captura es parte de los timers, pero es activado solamente cuando se utiliza algún tipo de comunicación I2C, Bluetooth, etc. 
		Solamente se puede usar con el timer 1 este tipo de muestreo.
			- ADTS2 = 1
			- ADTS1 = 1
			- ADTS0 = 1*/
	ADCSRB |= (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0); //Modo de corrida libre; ADTS2 = 0, ADTS1 = 0, ADTS0 = 0
  de:	ab e7       	ldi	r26, 0x7B	; 123
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	8c 93       	st	X, r24
	
	/*SEI: Cuando se activa una SEI interruption, automáticamente el bit 7 del status register (GI) se convierte en 1 lógico, lo que convierte a las interrupciones en NMI 
	(No Mask Interruption):
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	sei(); //Permite cualquier interrupción que entre ya después de haber programado la máquina y cuando haya terminado de ejecutarse una interrupción anterior.
  e6:	78 94       	sei
		- ADEN: Bit que activa o desactiva el ADC del microcontrolador:
			- ADEN = 1: Activación de la conversión ADC.
				- ADSC = 1: Iniciación de la conversión, mientras el bit del registro se mantenga en su valor uno lógico, la conversión ADC sigue en proceso.
				- ADSC = 0: Fin de la conversión, cuando se acabe la conversión ADC el bit cambiará a cero lógico por sí solo.
			- ADEN = 0: Desactivación de la conversión ADC.*/
	ADCSRA |= (1<<ADSC); //Iniciación de la conversión ADC; ADSC = 1
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	while(1)
	{
		/*Se recomienda en la bibliografía que cuando se hace una asignación al PIN, se le de un tiempo de 2 NOP, osea 2 microsegundos, para que 
		el puerto se regule.*/
		//Cuando se usen delays en las simulaciones, se debe poner un 1 dentro del paréntesis sino se queda mucho tiempo trabado el simulador.
		asm volatile ("NOP"); //NOP: Indica un retardo de tiempo de dos ciclos de máquina, el cual está relacionado a la señal de reloj del microcontrolador
  ee:	00 00       	nop
		asm volatile ("NOP"); //NOP: Indica un retardo de tiempo de dos ciclos de máquina, el cual está relacionado a la señal de reloj del microcontrolador
  f0:	00 00       	nop
  f2:	fd cf       	rjmp	.-6      	; 0xee <main+0x3e>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
