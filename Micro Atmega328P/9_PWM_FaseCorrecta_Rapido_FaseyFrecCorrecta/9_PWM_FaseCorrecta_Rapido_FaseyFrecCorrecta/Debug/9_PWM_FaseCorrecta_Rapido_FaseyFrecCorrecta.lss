
9_PWM_FaseCorrecta_Rapido_FaseyFrecCorrecta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027b  00000000  00000000  00000ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void){
    /*CLI: Cuando se activa una CLI interruption, automáticamente el bit 7 del status register que es GI (General Interruption) se convierte en 0 lógico, lo que convierte a 
	las interrupciones en MI (Maskable Interrupt), esto en términos más simples significa que las interrupciones están activas:
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	cli(); //Evita cualquier interrupción que entre mientras ya se está ejecutando una o antes de programar la máquina, ya que termine, permite la ejecución de interrupciones.
  80:	f8 94       	cli
		PB3 (Pin 11):	OC2A, osea el canal A de la señal PWM del timer T2.
		PD3 (Pin 3):	OC2B, osea el canal B de la señal PWM del timer T2.
	Cuando se declaren los pines se deben declarar todos de jalón cuando pertenezcan a un mismo puerto sino la salida no se va a ver reflejada en el Arduino.*/
	//Temporizador T0: Pines 6 y 5	(PD6 y PD5) del Puerto D como salidas del canal A y B;		frecuencia de 500 Hz;	T = 2ms;	Fast PWM, Valor max OCR0A activado.
	//Temporizador T2: Pines 11 y 3	(PB3 y PD3) del Puerto B y D como salidas del canal A y B;	frecuencia de 0.5Hz;	T = 2s;		PWM fase y frecuencia correcta.
	DDRD = (1<<DDD6)|(1<<DDD5)|(1<<DDD3);
  82:	88 e6       	ldi	r24, 0x68	; 104
  84:	8a b9       	out	0x0a, r24	; 10
	//Temporizador T1: Pines 9 y 10	(PB1 y PB2) del Puerto B como salidas del canal A y B;		frecuencia de 1 Hz;		T = 1s;		Fast PWM.
	DDRB = (1<<DDB1)|(1<<DDB2)|(1<<DDB3);
  86:	8e e0       	ldi	r24, 0x0E	; 14
  88:	84 b9       	out	0x04, r24	; 4
		con 0 lógico se deja a los temporizadores T0 y T1 con el último valor de conteo que tenían y escala con la que se quedaron.
	Cuando se usa más de un timer para manejo de tiempos, es necesario usar este registro, además esto se debe hacer justo antes de configurar los timers, una vez 
	configurados, se debe volver a hacer que este registro valga 0.
	No es tan importante usar el registro GTCCR cuando se usan interrupciones externas, pero cuando se usa temporizadores si lo es, ya que puede evitar que falle el programa, 
	además cuando se usan varios temporizadores a la vez, deben usarse en Puertos diferentes, sino fallarán.*/
	GTCCR = (1<<TSM)|(1<<PSRASY)|(1<<PSRSYNC); //TSM -> Timers sincronizados; PSRASY -> Timer T2 reiniciado; PSRSYNC -> Timers T0 y T1 reiniciados.
  8a:	83 e8       	ldi	r24, 0x83	; 131
  8c:	83 bd       	out	0x23, r24	; 35
	//T1: Frecuencia de 1Hz;	T = 1s;		Fast PWM, ciclo de trabajo de 25% en OCR1A en modo no invertido y de 75% en OCR1B en modo no invertido.
	//T2: Frecuencia de 0.5Hz;	T = 2s;		PWM fase y frecuencia correcta,
	
	//TCCR#A o registro de control del temporizador A: Sirve para indicar el tipo de salida y tipo de comparación en el temporizador T#, accede a los bits WMG#1 y WMG#0.
	//CONFIGURACIÓN SEÑAL PWM CANAL A:
	TCCR0A |= (1<<COM0A1)|(0<<COM0A0);	//Configuración Cero lógico en OC0 (Modo no invertido); COM0A1 = 1, COM0A0 = 0; T0 - Canal A
  8e:	84 b5       	in	r24, 0x24	; 36
  90:	80 68       	ori	r24, 0x80	; 128
  92:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (1<<COM1A1)|(0<<COM1A0);	//Configuración Cero lógico en OC1 (Modo no invertido); COM1A1 = 1, COM1A0 = 0; T1 - Canal A
  94:	a0 e8       	ldi	r26, 0x80	; 128
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	8c 91       	ld	r24, X
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8c 93       	st	X, r24
	TCCR2A |= (1<<COM2A1)|(1<<COM2A0);	//Configuración Cero lógico en OC2 (Modo no invertido);	COM2A1 = 1, COM2A0 = 1; T2 - Canal A
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 6c       	ori	r24, 0xC0	; 192
  a6:	80 83       	st	Z, r24
	//CONFIGURACIÓN SEÑAL PWM CANAL B:
	TCCR0A |= (1<<COM0B1)|(1<<COM0B0);	//Configuración Uno lógico en OC0 (Modo no invertido);	COM0B1 = 1, COM0B0 = 0; T0 - Canal B
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	80 63       	ori	r24, 0x30	; 48
  ac:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (1<<COM1B1)|(1<<COM1B0);	//Configuración Uno lógico en OC1 (Modo invertido);		COM1B1 = 1, COM1B0 = 1; T1 - Canal B
  ae:	8c 91       	ld	r24, X
  b0:	80 63       	ori	r24, 0x30	; 48
  b2:	8c 93       	st	X, r24
	TCCR2A |= (1<<COM2B1)|(1<<COM2B0);	//Configuración Uno lógico en OC2 (Modo invertido);		COM2B1 = 1, COM2B0 = 1; T2 - Canal B
  b4:	80 81       	ld	r24, Z
  b6:	80 63       	ori	r24, 0x30	; 48
  b8:	80 83       	st	Z, r24
	//TIPO DE COMPARADOR - PARTE 1/2: Esto se aplica a ambos canales A y B del mismo temporizador.
	TCCR0A |= (1<<WGM01)|(1<<WGM00);	//Configuración de PWM Rápido (OCRA); TCCR0B -> WMG02 = 1; TCCR0A -> WMG01 = 1 y WMG00 = 1
  ba:	84 b5       	in	r24, 0x24	; 36
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (0<<WGM11)|(1<<WGM10);	//Configuración de PWM Rápido (8 bits); TCCR1B -> WMG13 = 0 y WMG12 = 1; TCCR1A -> WMG11 = 0 y WMG10 = 1; T1 se maneja distinto.
  c0:	8c 91       	ld	r24, X
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8c 93       	st	X, r24
	TCCR2A |= (1<<WGM21)|(0<<WGM20);	//Configuración de PWM Fase Correcta OCRA; TCCR2B -> WMG02 = 1; TCCR2A -> WMG21 = 0 y WMG20 = 1
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
	-	La instrucción &= lo que hace es solo asignar el valor de un bit 0 de un número binario sin afectar a los demás.
	-	La instrucción |= lo que hace es solo asignar el valor de un bit 1 de un número binario sin afectar a los demás.
	Se pueden obtener frecuencias mayores con escalas pequeñas y frecuencias menores con escalas grandes.*/
	//TCCR#B o registro de control del temporizador: Sirve para indicar la configuración de escala y tipo de comparador.
	//ESCALA DEL TEMPORIZADOR:
	TCCR0B |= (1<<CS02)|(0<<CS01)|(1<<CS00);			//T0: Escala de 1024;	CS02 = 1, CS01 = 0 y CS00 = 1
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10);			//T1: Escala de 1024;	CS12 = 1, CS11 = 0 y CS10 = 1
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20)|(0<<WGM22);	//T2: Escala de 1024;	CS22 = 1, CS21 = 1 y CS20 = 1, no se puede usar un timer externo con T2, se maneja diferente.
  dc:	a1 eb       	ldi	r26, 0xB1	; 177
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	8c 91       	ld	r24, X
  e2:	87 60       	ori	r24, 0x07	; 7
  e4:	8c 93       	st	X, r24
	//TIPO DE COMPARADOR - PARTE 2/2:
	/*Aguas porque asignar ceros solos, normalmente causa problemas, si se quiere poner explícitamente, debe estar incluido dentro de una declaración con varios bits, en 
	específico se encuentra declarada en los registros TCCR#B de arriba, por eso en esta parte se comentó y solo se dejó indicado para que fuera más entendible.*/
	TCCR0B |= (1<<WGM02);				//Configuración de PWM Rápido (OCRA); TCCR0B -> WMG02 = 1; TCCR0A -> WMG01 = 1 y WMG00 = 1
  e6:	85 b5       	in	r24, 0x25	; 37
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (0<<WGM13)|(1<<WGM12);	//Configuración de PWM Rápido (8 bits); TCCR1B -> WMG13 = 0 y WMG12 = 1; TCCR1A -> WMG11 = 0 y WMG10 = 1; T1 se maneja distinto.
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
		- TOIE0: Hace que el timer T0 de 8 bits sea de tipo desbordamiento si se le manda un 1 lógico y si se queda como 0 lógico es de tipo comparación.
		
		- OCIE2A: Hace que el timer T2 de 8 bits sea de tipo comparación y que se active el registro OCR0A o OCR0B para marcar el límite del conteo.
		- OCIE1A: Hace que el timer T1 de 16 bits sea de tipo comparación y que se active el registro OCR1A o OCR1B para marcar el límite del conteo.
		- OCIE0A: Hace que el timer T0 de 8 bits sea de tipo comparación y que se active el registro OCR2A o OCR2B para marcar el límite del conteo.*/
	TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A)|(1<<OCIE0B); //Timer T0 de 8 bits de tipo comparación, registro de comparación OCR0A y OCR0B activados, se puede usarlos en PWM.
  f2:	ee e6       	ldi	r30, 0x6E	; 110
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	80 83       	st	Z, r24
	TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A)|(1<<OCIE1B); //Timer T1 de 16 bits de tipo comparación, registro de comparación OCR1A y OCR1B activados, se puede usarlos en PWM.
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	86 60       	ori	r24, 0x06	; 6
 104:	80 83       	st	Z, r24
	TIMSK2 |= (0<<TOIE2)|(1<<OCIE2A)|(1<<OCIE2B); //Timer T2 de 8 bits de tipo comparación, registro de comparación OCR2A y OCR2B activados, se puede usarlos en PWM.
 106:	e0 e7       	ldi	r30, 0x70	; 112
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	86 60       	ori	r24, 0x06	; 6
 10e:	80 83       	st	Z, r24
		1.2.- TOP = (fmicro / (frecuencia*escala)) - 1 = (16X10^6 / (500*1024)) - 1 = 30.25
	CANAL B: Modo no invertido
		2.1.- Periodo = T = (escala*(1 + OCR#A)) / fmicro = (escala*(1 + TOP)) / fmicro = (1024*(1 + 30.25)) / 16X10^6 = 0.002s = 2ms
		3.1.- t_dutyycle = T*Porcentaje_deseado = 0.002*0.8 = 0.0016s = 1.6ms
		4.1.- OCR#A_dutycycle_NI = ((t_dutycycle*fmicro) / escala) - 1 = ((0.0016*16X10^6) / 1024) - 1 = 24; Modo no invertido.*/
	OCR0A = 30.25;	//Fast PWM, Valor max personalizado; OCRA = 30.25
 110:	8e e1       	ldi	r24, 0x1E	; 30
 112:	87 bd       	out	0x27, r24	; 39
	OCR0B = 24;		//Fast PWM; frecuencia = 500Hz; t_deseado = 2ms; escala = 1024; conteo_OCRB_NI = 24; duty cycle = 80%
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	88 bd       	out	0x28, r24	; 40
		2.1.- Periodo = T = 1 / frecuencia = 1s
		3.1.- t_dutyycle = T*Porcentaje_deseado = 1*0.25 = 0.25s
		4.1.- OCR#A_dutycycle_NI = ((t_dutycycle*fmicro) / escala) - 1 = ((0.25*16X10^6) / 1024) - 1 = 3905.25; Modo no invertido
	CANAL B: Modo invertido
		4.2.- OCR#A_dutycycle_I = conteo_total_temporizador - OCR#A_dutycycle_NI = 12528.75; Modo invertido.*/
	OCR1A = 3905.25;	//Fast PWM; frecuencia = 1Hz; t_deseado = 1s; escala = 1024; conteo_OCRA_NI = 3905.25; duty cycle = 25%
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 12528.75;	//Fast PWM; frecuencia = 1Hz; t_deseado = 1s; escala = 1024; conteo_OCRB_I = 12528.75; duty cycle = 75%
 124:	80 ef       	ldi	r24, 0xF0	; 240
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 12c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	En el registro comparador OCR2A se debe poner su conteo máximo que es de 255, como en este caso es mayor a ese número se calcula el número de ciclos y se pone en el 
	registro OCR2A su valor máximo que es de 255:
		1.2.- ciclos = conteo_OCR#A/conteo_total_temporizador = 15,624/255 = 61.2705 = 62
		1.3.- conteo_OCR#A = 255
	En el registro comparador OCR2A se debe poner su conteo máximo que es de 255 y crear una variable que guarde el número de ciclos calculados para usarse en la ISR.*/
	OCR2A = 255; //frecuencia = 1Hz; t_deseado = 2s; escala = 1024; conteo_OCR = 255; ciclos = 62
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//GTCCR: Una vez configurados los timers, se debe poner como cero el registro que reinicia y sincroniza los timers, liberando así los timers.
	GTCCR = (0<<TSM)|(0<<PSRASY)|(0<<PSRSYNC); //TSM -> Timers NO sincronizados; PSRASY -> Timer T2 NO reiniciado; PSRSYNC -> Timers T0 y T1 NO reiniciados.
 136:	13 bc       	out	0x23, r1	; 35
	
	/*SEI: Cuando se activa una SEI interruption, automáticamente el bit 7 del status register (GI) se convierte en 1 lógico, lo que convierte a las interrupciones en NMI 
	(No Mask Interruption):
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	sei(); //Permite cualquier interrupción que entre ya después de haber programado la máquina y cuando haya terminado de ejecutarse una interrupción anterior.
 138:	78 94       	sei
 13a:	ff cf       	rjmp	.-2      	; 0x13a <main+0xba>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
