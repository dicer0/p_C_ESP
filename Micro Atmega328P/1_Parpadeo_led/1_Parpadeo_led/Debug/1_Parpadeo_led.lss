
1_Parpadeo_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000136  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ef  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a0  00000000  00000000  00000a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c8  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003be  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d6  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	que es el manejador de puertos, perteneciente a los registros de funciones especiales. Esto se declara en la variable local DDR, que puede ser usada en el puerto 
	B, C o D. Creando así las variables DDRB (Puerto B), DDRC (Puerto C) o DDRD (Puerto D). Cuando dentro de Microchip Studio alguna palabra se pone de color morado es 
	porque es una palabra reservada, en este caso es porque accede a alguno de los puertos del Atmega328P.*/
	//Puerto como entrada: 0
	//Puerto como salida: 1
	DDRB = 0xFF;//Todos los puertos como salidas
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;//Todos los puertos como salidas
  aa:	8a b9       	out	0x0a, r24	; 10
	/*PORTB Arduino = 13,		12,		11,		10,		9,		8*/
	
    /*Bucle for: La mayoría de los códigos C aplicados en un microcontrolador se deben aplicar dentro de un bucle porque lo que debe realizar es repetitivo*/
    while (1) 
    {
		for (i = 1; i < 256; i++)
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i+0x1>
  b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
  b8:	33 c0       	rjmp	.+102    	; 0x120 <main+0x7a>
		{
			PORTB = a;
  ba:	e2 e0       	ldi	r30, 0x02	; 2
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	80 81       	ld	r24, Z
  c0:	85 b9       	out	0x05, r24	; 5
			PORTD = b;
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	8c 91       	ld	r24, X
  c8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	89 e6       	ldi	r24, 0x69	; 105
  ce:	98 e1       	ldi	r25, 0x18	; 24
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x34>
  da:	00 00       	nop
			/*Cuando cualquier método de una librería empieza con un guión bajo es porque está mandando a llamar un archivo de ensamblador, cuando no empiece con 
			un guión bajo el nombre del método es porque está ejecutando un árchivo o función hecha en lenguaje C*/
			//_delay_ms(): Retardo de tiempo indicado en milisegundos, usa la variable F_CPU
			_delay_ms(500);
			PORTB = b;
  dc:	8c 91       	ld	r24, X
  de:	85 b9       	out	0x05, r24	; 5
			PORTD = a;
  e0:	80 81       	ld	r24, Z
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x44>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x4e>
  f4:	00 00       	nop
			_delay_ms(500);
			PORTB = c;
  f6:	e4 e0       	ldi	r30, 0x04	; 4
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	80 81       	ld	r24, Z
  fc:	85 b9       	out	0x05, r24	; 5
			PORTD = c;
  fe:	80 81       	ld	r24, Z
 100:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e8       	ldi	r24, 0x8F	; 143
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x60>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x66>
 10c:	00 00       	nop
	/*PORTB Arduino = 13,		12,		11,		10,		9,		8*/
	
    /*Bucle for: La mayoría de los códigos C aplicados en un microcontrolador se deben aplicar dentro de un bucle porque lo que debe realizar es repetitivo*/
    while (1) 
    {
		for (i = 1; i < 256; i++)
 10e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
 112:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i+0x1>
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i+0x1>
 11c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
 120:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i>
 124:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i+0x1>
 128:	8f 3f       	cpi	r24, 0xFF	; 255
 12a:	91 05       	cpc	r25, r1
 12c:	31 f2       	breq	.-116    	; 0xba <main+0x14>
 12e:	2c f2       	brlt	.-118    	; 0xba <main+0x14>
 130:	bd cf       	rjmp	.-134    	; 0xac <main+0x6>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
