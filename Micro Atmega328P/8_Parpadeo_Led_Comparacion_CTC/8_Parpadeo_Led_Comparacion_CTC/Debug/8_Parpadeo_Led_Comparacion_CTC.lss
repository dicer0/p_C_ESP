
8_Parpadeo_Led_Comparacion_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000073e  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e9  00000000  00000000  000010d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000129  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void){
    /*CLI: Cuando se activa una CLI interruption, automáticamente el bit 7 del status register que es GI (General Interruption) se convierte en 0 lógico, lo que convierte a 
	las interrupciones en MI (Maskable Interrupt), esto en términos más simples significa que las interrupciones están activas:
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	cli(); //Evita cualquier interrupción que entre mientras ya se está ejecutando una o antes de programar la máquina, ya que termine, permite la ejecución de interrupciones.
  a6:	f8 94       	cli
	
	
	//PROGRAMACIÓN DE LA MÁQUINA: Se indica por medio de los registros de función específica si los pines de los puertos serán entradas o salidas o el estado de los timers.
	//0: Pin como entrada
	//1: Pin como salida
	DDRB = (1<<DDB0); //Pin 8	(PB0) del Puerto B como salida, parpadeo de 1s;		Temporizador T0.
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<DDC0); //Pin A0  (PC0) del Puerto C como salida, parpadeo de 5s;		Temporizador T1.
  ac:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD0); //Pin 0	(PD0) del Puerto D como salida, parpadeo de 2.5s;	Temporizador T2.
  ae:	8a b9       	out	0x0a, r24	; 10
		con 0 lógico se deja a los temporizadores T0 y T1 con el último valor de conteo que tenían y escala con la que se quedaron.
	Cuando es usa más de un timer para manejo de tiempos, es necesario usar este registro, además esto se debe hacer justo antes de configurar los timers, una vez 
	configurados, se debe volver este registro a que valga 0.
	No es tan importante usar el registro GTCCR cuando se usan interrupciones externas, pero cuando se hace con temporizadores si lo es, ya que puede evitar que falle el 
	programa, además cuando se usan varios temporizadores a la vez, deben usarse en Puertos diferentes, sino fallarán.*/
	GTCCR = (1<<TSM)|(1<<PSRASY)|(1<<PSRSYNC); //TSM -> Timers sincronizados; PSRASY -> Timer T2 reiniciado; PSRSYNC -> Timers T0 y T1 reiniciados.
  b0:	83 e8       	ldi	r24, 0x83	; 131
  b2:	83 bd       	out	0x23, r24	; 35
			- COM0A1 = 1
			- COM0A0 = 1
	La salida determinada con los pines del registro TCCR0A se verá en el pin 6	(PD6) del Puerto D, conectada a la salida OCR0A.*/
	//TCCR#A o registro de control del temporizador A: Sirve para indicar el tipo de salida y tipo de comparación en el temporizador T#, accede a los bits WMG#1 y WMG#0.
	//TIPO DE SALIDA EN LA SEÑAL CUADRADA:
	TCCR0A |= (1<<COM0A1)|(1<<COM0A0);	//Configuración Uno lógico en OC0 (Osea la señal de salida OCR#A y OCR#B); COM0A1 = 1, COM0A0 = 1
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	80 6c       	ori	r24, 0xC0	; 192
  b8:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0);	//Configuración Uno lógico en OC1 (Osea la señal de salida OCR#A y OCR#B); COM1A1 = 1, COM1A0 = 1
  ba:	a0 e8       	ldi	r26, 0x80	; 128
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	8c 91       	ld	r24, X
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	8c 93       	st	X, r24
	TCCR2A |= (1<<COM2A1)|(1<<COM2A0);	//Configuración Uno lógico en OC2 (Osea la señal de salida OCR#A y OCR#B); COM2A1 = 1, COM2A0 = 1
  c4:	e0 eb       	ldi	r30, 0xB0	; 176
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 6c       	ori	r24, 0xC0	; 192
  cc:	80 83       	st	Z, r24
	//TIPO DE COMPARADOR - PARTE 1/2:
	TCCR0A |= (1<<WGM01)|(0<<WGM00);	//Configuración de comparador CTC; TCCR0B -> WMG02 = 0; TCCR0A -> WMG01 = 1 y WMG00 = 0
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (0<<WGM11)|(0<<WGM10);	//Configuración de comparador CTC; TCCR1B -> WMG13 = 0 y WMG12 = 1; TCCR1A -> WMG11 = 0 y WMG10 = 0; El timer T1 se maneja distinto.
  d4:	8c 91       	ld	r24, X
  d6:	8c 93       	st	X, r24
	TCCR2A |= (1<<WGM21)|(0<<WGM20);	//Configuración de comparador CTC; TCCR2B -> WMG02 = 0; TCCR2A -> WMG21 = 1 y WMG20 = 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	
	-	La instrucción &= lo que hace es solo asignar el valor de un bit 0 de un número binario sin afectar a los demás.
	-	La instrucción |= lo que hace es solo asignar el valor de un bit 1 de un número binario sin afectar a los demás.*/
	//TCCR#B o registro de control del temporizador: Sirve para indicar la configuración de escala y tipo de comparador.
	//ESCALA DEL TEMPORIZADOR:
	TCCR0B |= (1<<CS02)|(0<<CS01)|(1<<CS00)|(0<<WGM02);	//T0: Escala de 1024; CS02 = 1, CS01 = 0 y CS00 = 1
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	85 60       	ori	r24, 0x05	; 5
  e2:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10);			//T1: Escala de 1024; CS12 = 1, CS11 = 1 y CS10 = 1
  e4:	e1 e8       	ldi	r30, 0x81	; 129
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	85 60       	ori	r24, 0x05	; 5
  ec:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20)|(0<<WGM22);	//T2: Escala de 1024; CS22 = 1, CS21 = 1 y CS20 = 1, no se puede usar osciladores externos con T2, se maneja diferente.
  ee:	a1 eb       	ldi	r26, 0xB1	; 177
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	8c 91       	ld	r24, X
  f4:	87 60       	ori	r24, 0x07	; 7
  f6:	8c 93       	st	X, r24
	//TIPO DE COMPARADOR - PARTE 2/2:
	/*Aguas porque asignar ceros solos, normalmente causa problemas, si se quiere poner explícitamente, debe estar incluido dentro de una declaración con varios bits, en 
	específico se encuentra declarada en los registros TCCR#B de arriba, por eso en esta parte se comentó y solo se dejó indicado para que fuera más entendible.*/
	//TCCR0B &= (0<<WGM02);						//Configuración de comparador CTC; TCCR0B -> WMG02 = 0; TCCR0A -> WMG01 = 1 y WMG00 = 0
	TCCR1B |= (1<<WGM12)|(0<<WGM13);			//Configuración de comparador CTC; TCCR1B -> WMG13 = 0 y WMG12 = 1; TCCR1A -> WMG11 = 0 y WMG10 = 0; T1 se maneja distinto.
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
		- TOIE0: Hace que el timer T0 de 8 bits sea de tipo desbordamiento si se le manda un 1 lógico y si se queda como 0 lógico es de tipo comparación.
		
		- OCIE2A: Hace que el timer T2 de 8 bits sea de tipo comparación y que se active el registro OCR0A para marcar el límite del conteo.
		- OCIE1A: Hace que el timer T1 de 16 bits sea de tipo comparación y que se active el registro OCR1A para marcar el límite del conteo.
		- OCIE0A: Hace que el timer T0 de 8 bits sea de tipo comparación y que se active el registro OCR2A para marcar el límite del conteo.*/
	TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A); //Timer T0 de 8 bits habilitado como tipo comparación, registro de comparación OCR0A activado. Solo se puede usar el canal A en CTC.
  fe:	ee e6       	ldi	r30, 0x6E	; 110
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
	TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A); //Timer T1 de 16 bits habilitado como tipo comparación, registro de comparación OCR1A activado. Solo se puede usar el canal A en CTC.
 108:	ef e6       	ldi	r30, 0x6F	; 111
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	80 83       	st	Z, r24
	TIMSK2 |= (0<<TOIE2)|(1<<OCIE2A); //Timer T2 de 8 bits habilitado como tipo comparación, registro de comparación OCR2A activado. Solo se puede usar el canal A en CTC.
 112:	e0 e7       	ldi	r30, 0x70	; 112
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
		conteo_total_temporizador T0 y T2	= 255
		conteo_total_temporizador T1		= 65,535
		1.2.- ciclos = t_deseado/conteo_unitario = 1/0.01632 = 61.2745 = 62
		1.3.- conteo_OCR#A = 255
	En el registro comparador OCR0A se debe poner su conteo máximo que es de 255 y crear una variable que guarde el número de ciclos calculados para usarse en la ISR.*/
	OCR0A = 255; //t_deseado = 1s; escala = 1024; conteo_OCR = 255; ciclos = 62
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bd       	out	0x27, r24	; 39
		1.2.- ciclos = t_deseado/conteo_unitario = 8/4.1942 = 1.1921 = 1
		1.3.- conteo_OCR#A = 65535
	En el registro comparador OCR0A se debe poner su conteo máximo que es de 65536 y crear una variable que guarde el número de ciclos calculados para usarse en la ISR.
	Nos dimos cuenta que para números muy cercanos a 4, usar el timer T1 no es tan exacto, porque los ciclos pueden solo ser números enteros, para ello es mejor usar los 
	otros timers y usar mejor el de 16 bits para números muy grandes.*/
	OCR1A = 65535; //t_deseado = 5s; escala = 1024; conteo_OCR = 65536; ciclos = 2
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	3f ef       	ldi	r19, 0xFF	; 255
 124:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 128:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		conteo_total_temporizador T0 y T2	= 255
		conteo_total_temporizador T1		= 65,535
		1.2.- ciclos = t_deseado/conteo_unitario = 2.5/0.01632 = 153.1862 = 154
		1.3.- conteo_OCR#A = 255
	En el registro comparador OCR0A se debe poner su conteo máximo que es de 65536 y crear una variable que guarde el número de ciclos calculados para usarse en la ISR.*/
	OCR2A = 255; //t_deseado = 2; escala = 1024; conteo_OCR = 5; ciclos = 125
 12c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//GTCCR: Una vez configurados los timers, se debe poner como cero el registro que reinicia y sincroniza los timers, liberando así los timers.
	GTCCR = (0<<TSM)|(0<<PSRASY)|(0<<PSRSYNC); //TSM -> Timers NO sincronizados; PSRASY -> Timer T2 NO reiniciado; PSRSYNC -> Timers T0 y T1 NO reiniciados.
 130:	13 bc       	out	0x23, r1	; 35
	
	/*SEI: Cuando se activa una SEI interruption, automáticamente el bit 7 del status register (GI) se convierte en 1 lógico, lo que convierte a las interrupciones en NMI 
	(No Mask Interruption):
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	sei(); //Permite cualquier interrupción que entre ya después de haber programado la máquina y cuando haya terminado de ejecutarse una interrupción anterior.
 132:	78 94       	sei
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x8e>

00000136 <__vector_14>:
	- TIMER1_OVF_vect: Interrupción causada por el temporizador T1 de 16 bits después de haber sido configurado con los registros TCCR0B y TIMSK0, este está asociado al pin 5 
	(PD5) del Puerto D en el Arduino, ya que se puede configurar el temporizador para recibir una señal de reloj de un oscilador externo.
	- TIMER2_OVF_vect: Interrupción causada por el temporizador T2 de 8 bits después de haber sido configurado con los registros TCCR0B y TIMSK0, no cuenta con pin de 
	Arduino.*/
//ISR T0 - 1s: Recibe como parámetro el vector TIMER0_COMPA_vect porque la interrupción es activada por la comparación con el registro OCR0A y TCNT0 del timer T0.
ISR (TIMER0_COMPA_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
		conteo_OCR#A <= conteo_total_temporizador
	Nadamás se deja la acción que se quiere ejecutar cuando se alcance el valor máximo del conteo marcado por OCR#A o cuando se hayan alcanzado los ciclos calculados.*/
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	cliclos_transcurridos_t0++; //Aumento de la variable que almacena el número de ciclos transcurridos cada vez que se ejecuta una interrupción del temporizador.
 148:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cliclos_transcurridos_t0>
 14c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cliclos_transcurridos_t0+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cliclos_transcurridos_t0+0x1>
 156:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cliclos_transcurridos_t0>
	
	if(cliclos_transcurridos_t0 >= cliclos_t0){
 15a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <cliclos_t0>
 15e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <cliclos_t0+0x1>
 162:	82 17       	cp	r24, r18
 164:	93 07       	cpc	r25, r19
 166:	44 f0       	brlt	.+16     	; 0x178 <__vector_14+0x42>
		//MÁSCARA XOR (^=): Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
		PORTB ^= (1<<PORTB0);			//Con esta instrucción se invierte lo que haya en el pin PB0 cada que ocurra una interrupción causada por el temporizador T0.
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	89 27       	eor	r24, r25
 16e:	85 b9       	out	0x05, r24	; 5
		cliclos_transcurridos_t0 = 0;	//Reinicio de la variable que almacena el número de ciclos transcurridos.
 170:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cliclos_transcurridos_t0+0x1>
 174:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cliclos_transcurridos_t0>
	}
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_11>:

//ISR T1 - 5s: Recibe como parámetro el vector TIMER1_COMPA_vect porque la interrupción es activada por la comparación con el registro OCR1A y TCNT1 del timer T1.
ISR (TIMER1_COMPA_vect){
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
		conteo_OCR#A <= conteo_total_temporizador
	Nadamás se deja la acción que se quiere ejecutar cuando se alcance el valor máximo del conteo marcado por OCR#A o cuando se hayan alcanzado los ciclos calculados.*/
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	cliclos_transcurridos_t1++; //Aumento de la variable que almacena el número de ciclos transcurridos cada vez que se ejecuta una interrupción del temporizador.
 19c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cliclos_transcurridos_t1>
 1a0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cliclos_transcurridos_t1+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <cliclos_transcurridos_t1+0x1>
 1aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <cliclos_transcurridos_t1>
	
	if(cliclos_transcurridos_t1 >= cliclos_t1){
 1ae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <cliclos_t1>
 1b2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <cliclos_t1+0x1>
 1b6:	82 17       	cp	r24, r18
 1b8:	93 07       	cpc	r25, r19
 1ba:	44 f0       	brlt	.+16     	; 0x1cc <__vector_11+0x42>
		//MÁSCARA XOR (^=): Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
		PORTC ^= (1<<PORTC0);			//Con esta instrucción se invierte lo que haya en el pin PB0 cada que ocurra una interrupción causada por el temporizador T0.
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	89 27       	eor	r24, r25
 1c2:	88 b9       	out	0x08, r24	; 8
		cliclos_transcurridos_t1 = 0;	//Reinicio de la variable que almacena el número de ciclos transcurridos.
 1c4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <cliclos_transcurridos_t1+0x1>
 1c8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <cliclos_transcurridos_t1>
	}
}
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_7>:

//ISR T2 - 2.5s: Recibe como parámetro el vector TIMER2_COMPA_vect porque la interrupción es activada por la comparación con el registro OCR2A y TCNT2 del timer T2.
ISR (TIMER2_COMPA_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
		conteo_OCR#A <= conteo_total_temporizador
	Nadamás se deja la acción que se quiere ejecutar cuando se alcance el valor máximo del conteo marcado por OCR#A o cuando se hayan alcanzado los ciclos calculados.*/
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	cliclos_transcurridos_t2++; //Aumento de la variable que almacena el número de ciclos transcurridos cada vez que se ejecuta una interrupción del temporizador.
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1fe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	
	if(cliclos_transcurridos_t2 >= cliclos_t2){
 202:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20a:	82 17       	cp	r24, r18
 20c:	93 07       	cpc	r25, r19
 20e:	44 f0       	brlt	.+16     	; 0x220 <__vector_7+0x42>
		//MÁSCARA XOR (^=): Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
		PORTD ^= (1<<PORTD0);			//Con esta instrucción se invierte lo que haya en el pin PC0 cada que ocurra una interrupción causada por el temporizador T2.
 210:	9b b1       	in	r25, 0x0b	; 11
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	89 27       	eor	r24, r25
 216:	8b b9       	out	0x0b, r24	; 11
		cliclos_transcurridos_t2 = 0;	//Reinicio de la variable que almacena el número de ciclos transcurridos.
 218:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 21c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	}
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
