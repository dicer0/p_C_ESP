
12_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001997  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  00001d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000868  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fef  00000000  00000000  0000345a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004449  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ENVIA_CMD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	98 2f       	mov	r25, r24
  92:	90 7f       	andi	r25, 0xF0	; 240
  94:	96 95       	lsr	r25
  96:	96 95       	lsr	r25
  98:	95 b9       	out	0x05, r25	; 5
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	9e 7f       	andi	r25, 0xFE	; 254
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	92 60       	ori	r25, 0x02	; 2
  a4:	95 b9       	out	0x05, r25	; 5
  a6:	ef e9       	ldi	r30, 0x9F	; 159
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <ENVIA_CMD+0x1a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <ENVIA_CMD+0x20>
  b0:	00 00       	nop
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	9d 7f       	andi	r25, 0xFD	; 253
  b6:	95 b9       	out	0x05, r25	; 5
  b8:	ef e3       	ldi	r30, 0x3F	; 63
  ba:	fc e9       	ldi	r31, 0x9C	; 156
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <ENVIA_CMD+0x2c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <ENVIA_CMD+0x32>
  c2:	00 00       	nop
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	8c 73       	andi	r24, 0x3C	; 60
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 b9       	out	0x05, r24	; 5
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <ENVIA_CMD+0x52>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <ENVIA_CMD+0x58>
  e8:	00 00       	nop
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	ef e3       	ldi	r30, 0x3F	; 63
  f2:	fc e9       	ldi	r31, 0x9C	; 156
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <ENVIA_CMD+0x64>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <ENVIA_CMD+0x6a>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <LCD_INICIALIZA>:
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 48 00 	call	0x90	; 0x90 <ENVIA_CMD>
 104:	88 e2       	ldi	r24, 0x28	; 40
 106:	0e 94 48 00 	call	0x90	; 0x90 <ENVIA_CMD>
 10a:	8e e0       	ldi	r24, 0x0E	; 14
 10c:	0e 94 48 00 	call	0x90	; 0x90 <ENVIA_CMD>
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 48 00 	call	0x90	; 0x90 <ENVIA_CMD>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 48 00 	call	0x90	; 0x90 <ENVIA_CMD>
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	0e 94 48 00 	call	0x90	; 0x90 <ENVIA_CMD>
 122:	08 95       	ret

00000124 <ENVIA_DATO>:
 124:	98 2f       	mov	r25, r24
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	96 95       	lsr	r25
 12a:	96 95       	lsr	r25
 12c:	95 b9       	out	0x05, r25	; 5
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	93 60       	ori	r25, 0x03	; 3
 132:	95 b9       	out	0x05, r25	; 5
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <ENVIA_DATO+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <ENVIA_DATO+0x1a>
 13e:	00 00       	nop
 140:	95 b1       	in	r25, 0x05	; 5
 142:	9d 7f       	andi	r25, 0xFD	; 253
 144:	95 b9       	out	0x05, r25	; 5
 146:	95 b1       	in	r25, 0x05	; 5
 148:	9e 7f       	andi	r25, 0xFE	; 254
 14a:	95 b9       	out	0x05, r25	; 5
 14c:	ef e3       	ldi	r30, 0x3F	; 63
 14e:	fc e9       	ldi	r31, 0x9C	; 156
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <ENVIA_DATO+0x2c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <ENVIA_DATO+0x32>
 156:	00 00       	nop
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	8c 73       	andi	r24, 0x3C	; 60
 164:	85 b9       	out	0x05, r24	; 5
 166:	85 b1       	in	r24, 0x05	; 5
 168:	83 60       	ori	r24, 0x03	; 3
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <ENVIA_DATO+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <ENVIA_DATO+0x52>
 176:	00 00       	nop
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8d 7f       	andi	r24, 0xFD	; 253
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	85 b9       	out	0x05, r24	; 5
 184:	ef e3       	ldi	r30, 0x3F	; 63
 186:	fc e9       	ldi	r31, 0x9C	; 156
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <ENVIA_DATO+0x64>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <ENVIA_DATO+0x6a>
 18e:	00 00       	nop
 190:	08 95       	ret

00000192 <POS_LINEA1>:
 192:	80 68       	ori	r24, 0x80	; 128
 194:	0e 94 48 00 	call	0x90	; 0x90 <ENVIA_CMD>
 198:	08 95       	ret

0000019a <ENVIO_USART>:


unsigned char a = 0;

void ENVIO_USART(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 19a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19e:	95 ff       	sbrs	r25, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <ENVIO_USART>
		UDR0 = data;
 1a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a6:	08 95       	ret

000001a8 <RECIVO_USART>:
}

unsigned char RECIVO_USART(void){
	while(!(UCSR0A & (1<<RXC0)));
 1a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <RECIVO_USART>
		return UDR0;
 1b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 1b4:	08 95       	ret

000001b6 <main>:

int main(void)
{
    cli();
 1b6:	f8 94       	cli
	UCSR0A = (0<<RXC0)|(0<<TXC0)|(0<<UDRE0)|(0<<FE0)|(0<<DOR0);
 1b8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	10 82       	st	Z, r1
	UCSR0A |= (0<<U2X0)|(0<<MPCM0); // UCSR0A = 0x00;
 1be:	80 81       	ld	r24, Z
 1c0:	80 83       	st	Z, r24
	UCSR0B = (0<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0);
 1c2:	e1 ec       	ldi	r30, 0xC1	; 193
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	88 e1       	ldi	r24, 0x18	; 24
 1c8:	80 83       	st	Z, r24
	UCSR0B |= (0<<UCSZ02)|(0<<RXB80)|(0<<TXB80); // UCSR0B = 0b00011000;
 1ca:	80 81       	ld	r24, Z
 1cc:	80 83       	st	Z, r24
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0);  //1 bit de paro
 1ce:	e2 ec       	ldi	r30, 0xC2	; 194
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0); // UCSR0C = 0b00000110;  //trama de 8 bits
 1d4:	80 81       	ld	r24, Z
 1d6:	86 60       	ori	r24, 0x06	; 6
 1d8:	80 83       	st	Z, r24
	UBRR0H = 0x00;
 1da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67; //UBRR = 103 -> tasa de baudios 9600
 1de:	87 e6       	ldi	r24, 0x67	; 103
 1e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	DDRB = 0xFF; //Puerto B -> salida
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //Puerto C como salida (LCD)
 1e8:	87 b9       	out	0x07, r24	; 7
	//PORTB = 0;
	PORTC = 0x00;
 1ea:	18 b8       	out	0x08, r1	; 8
	sei();
 1ec:	78 94       	sei
	
	LCD_INICIALIZA();
 1ee:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_INICIALIZA>
	//ASCII nueva linea = 10;
    while (1) 
    {
		a = RECIVO_USART();
 1f2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <RECIVO_USART>
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	81 ee       	ldi	r24, 0xE1	; 225
 1fe:	94 e0       	ldi	r25, 0x04	; 4
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x4a>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x54>
 20a:	00 00       	nop
		//PORTB = a;
		_delay_ms(100);
		ENVIO_USART(a);
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	0e 94 cd 00 	call	0x19a	; 0x19a <ENVIO_USART>
		if(a != 10){ //Evita que imprima el equivalente a nueva linea
 214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 218:	8a 30       	cpi	r24, 0x0A	; 10
 21a:	39 f0       	breq	.+14     	; 0x22a <main+0x74>
			POS_LINEA1(0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 c9 00 	call	0x192	; 0x192 <POS_LINEA1>
			ENVIA_DATO(a);
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 226:	0e 94 92 00 	call	0x124	; 0x124 <ENVIA_DATO>
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	81 ee       	ldi	r24, 0xE1	; 225
 22e:	94 e0       	ldi	r25, 0x04	; 4
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x7a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x84>
 23a:	00 00       	nop
 23c:	da cf       	rjmp	.-76     	; 0x1f2 <main+0x3c>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
