
8_Frecuencia_senal_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f2  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c5  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void){
    /*CLI: Cuando se activa una CLI interruption, automáticamente el bit 7 del status register que es GI (General Interruption) se convierte en 0 lógico, lo que convierte a 
	las interrupciones en MI (Maskable Interrupt), esto en términos más simples significa que las interrupciones están activas:
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	cli(); //Evita cualquier interrupción que entre mientras ya se está ejecutando una o antes de programar la máquina, ya que termine, permite la ejecución de interrupciones.
  a6:	f8 94       	cli
	
	
	//PROGRAMACIÓN DE LA MÁQUINA: Se indica por medio de los registros de función específica si los pines de los puertos serán entradas o salidas o el estado de los timers.
	//0: Pin como entrada
	//1: Pin como salida
	DDRB = (1<<DDB0); //Pin 8	(PB0) del Puerto B como salida, frecuencia de 1kHz;		T = 1ms;	Temporizador T0.
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<DDC0); //Pin A0  (PC0) del Puerto C como salida, frecuencia de 1Hz;		T = 1s;		Temporizador T1.
  ac:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD0); //Pin 0	(PD0) del Puerto D como salida, frecuencia de 0.5Hz;	T = 2s;		Temporizador T2.
  ae:	8a b9       	out	0x0a, r24	; 10
		con 0 lógico se deja a los temporizadores T0 y T1 con el último valor de conteo que tenían y escala con la que se quedaron.
	Cuando es usa más de un timer para manejo de tiempos, es necesario usar este registro, además esto se debe hacer justo antes de configurar los timers, una vez 
	configurados, se debe volver este registro a que valga 0.
	No es tan importante usar el registro GTCCR cuando se usan interrupciones externas, pero cuando se hace con temporizadores si lo es, ya que puede evitar que falle el 
	programa, además cuando se usan varios temporizadores a la vez, deben usarse en Puertos diferentes, sino fallarán.*/
	GTCCR = (1<<TSM)|(1<<PSRASY)|(1<<PSRSYNC); //TSM -> Timers sincronizados; PSRASY -> Timer T2 reiniciado; PSRSYNC -> Timers T0 y T1 reiniciados.
  b0:	83 e8       	ldi	r24, 0x83	; 131
  b2:	83 bd       	out	0x23, r24	; 35
			- COM0A1 = 1
			- COM0A0 = 1
	La salida determinada con los pines del registro TCCR0A se verá en el pin 6	(PD6) del Puerto D, conectada a la salida OCR0A.*/
	//TCCR#A o registro de control del temporizador A: Sirve para indicar el tipo de salida y tipo de comparación en el temporizador T#, accede a los bits WMG#1 y WMG#0.
	//TIPO DE SEÑAL DE SALIDA CUADRADA:
	TCCR0A |= (1<<COM0A1)|(1<<COM0A0);	//Configuración Uno lógico en OC0 (Osea la señal de salida OCR#A y OCR#B); COM0A1 = 1, COM0A0 = 1
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	80 6c       	ori	r24, 0xC0	; 192
  b8:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0);	//Configuración Uno lógico en OC1 (Osea la señal de salida OCR#A y OCR#B); COM1A1 = 1, COM1A0 = 1
  ba:	a0 e8       	ldi	r26, 0x80	; 128
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	8c 91       	ld	r24, X
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	8c 93       	st	X, r24
	TCCR2A |= (1<<COM2A1)|(1<<COM2A0);	//Configuración Uno lógico en OC2 (Osea la señal de salida OCR#A y OCR#B); COM2A1 = 1, COM2A0 = 1
  c4:	e0 eb       	ldi	r30, 0xB0	; 176
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 6c       	ori	r24, 0xC0	; 192
  cc:	80 83       	st	Z, r24
	//TIPO DE COMPARADOR - PARTE 1/2:
	TCCR0A |= (1<<WGM01)|(0<<WGM00);	//Configuración de comparador CTC; TCCR0B -> WMG02 = 0; TCCR0A -> WMG01 = 1 y WMG00 = 0
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (0<<WGM11)|(0<<WGM10);	//Configuración de comparador CTC; TCCR1B -> WMG13 = 0 y WMG12 = 1; TCCR1A -> WMG11 = 0 y WMG10 = 0; El timer T1 se maneja distinto.
  d4:	8c 91       	ld	r24, X
  d6:	8c 93       	st	X, r24
	TCCR2A |= (1<<WGM21)|(0<<WGM20);	//Configuración de comparador CTC; TCCR2B -> WMG02 = 0; TCCR2A -> WMG21 = 1 y WMG20 = 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	
	-	La instrucción &= lo que hace es solo asignar el valor de un bit 0 de un número binario sin afectar a los demás.
	-	La instrucción |= lo que hace es solo asignar el valor de un bit 1 de un número binario sin afectar a los demás.*/
	//TCCR#B o registro de control del temporizador: Sirve para indicar la configuración de escala y tipo de comparador.
	//ESCALA DEL TEMPORIZADOR:
	TCCR0B |= (0<<CS02)|(1<<CS01)|(1<<CS00)|(0<<WGM02);	//T0: Escala de 64;		CS02 = 0, CS01 = 1 y CS00 = 1
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS12)|(0<<CS11)|(0<<CS10);			//T1: Escala de 256;	CS12 = 1, CS11 = 0 y CS10 = 0
  e4:	e1 e8       	ldi	r30, 0x81	; 129
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20)|(0<<WGM22);	//T2: Escala de 1024;	CS22 = 1, CS21 = 1 y CS20 = 1, no se puede usar un timer externo con T2, se maneja diferente.
  ee:	a1 eb       	ldi	r26, 0xB1	; 177
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	8c 91       	ld	r24, X
  f4:	87 60       	ori	r24, 0x07	; 7
  f6:	8c 93       	st	X, r24
	//TIPO DE COMPARADOR - PARTE 2/2:
	/*Aguas porque asignar ceros solos, normalmente causa problemas, si se quiere poner explícitamente, debe estar incluido dentro de una declaración con varios bits, en 
	específico se encuentra declarada en los registros TCCR#B de arriba, por eso en esta parte se comentó y solo se dejó indicado para que fuera más entendible.*/
	//TCCR0B &= (0<<WGM02);						//Configuración de comparador CTC; TCCR0B -> WMG02 = 0; TCCR0A -> WMG01 = 1 y WMG00 = 0
	TCCR1B |= (1<<WGM12)|(0<<WGM13);			//Configuración de comparador CTC; TCCR1B -> WMG13 = 0 y WMG12 = 1; TCCR1A -> WMG11 = 0 y WMG10 = 0; T1 se maneja distinto.
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
		- TOIE0: Hace que el timer T0 de 8 bits sea de tipo desbordamiento si se le manda un 1 lógico y si se queda como 0 lógico es de tipo comparación.
		
		- OCIE2A: Hace que el timer T2 de 8 bits sea de tipo comparación y que se active el registro OCR0A para marcar el límite del conteo.
		- OCIE1A: Hace que el timer T1 de 16 bits sea de tipo comparación y que se active el registro OCR1A para marcar el límite del conteo.
		- OCIE0A: Hace que el timer T0 de 8 bits sea de tipo comparación y que se active el registro OCR2A para marcar el límite del conteo.*/
	TIMSK0 |= (0<<TOIE0)|(1<<OCIE0A); //Timer T0 de 8 bits habilitado como tipo comparación, registro de comparación OCR0A activado. Solo se puede usar el canal A en CTC.
  fe:	ee e6       	ldi	r30, 0x6E	; 110
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
	TIMSK1 |= (0<<TOIE1)|(1<<OCIE1A); //Timer T1 de 16 bits habilitado como tipo comparación, registro de comparación OCR1A activado. Solo se puede usar el canal A en CTC.
 108:	ef e6       	ldi	r30, 0x6F	; 111
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	80 83       	st	Z, r24
	TIMSK2 |= (0<<TOIE2)|(1<<OCIE2A); //Timer T2 de 8 bits habilitado como tipo comparación, registro de comparación OCR2A activado. Solo se puede usar el canal A en CTC.
 112:	e0 e7       	ldi	r30, 0x70	; 112
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
		En este caso al hacer varias iteraciones con todas las escalas, se eligió la de 1:64 para alcanzar la frecuencia de 1X10^3 Hz = 1 kHz.
		1.- OCR#A = (16X10^6/(frecuencia*2*escala)) - 1 = (16X10^6/(1X10^3*2*64)) - 1 = 124
			conteo_total_temporizador T0 y T2	= 255		= OCR0A_max y OCR2A_max
			conteo_total_temporizador T1		= 65,536	= OCR1A_max
	En el registro comparador OCR0A se debe poner su conteo máximo que es de 255.*/
	OCR0A = 124; //frecuencia = 1kHz; t_deseado = 1ms; escala = 64; conteo_OCR = 124
 11c:	8c e7       	ldi	r24, 0x7C	; 124
 11e:	87 bd       	out	0x27, r24	; 39
		En este caso al hacer varias iteraciones con todas las escalas, se eligió la de 1:256 para alcanzar la frecuencia de 1Hz.
		1.- OCR#A = (16X10^6/(frecuencia*2*escala)) - 1 = (16X10^6/(1*2*256)) - 1 = 31,249
		conteo_total_temporizador T0 y T2	= 255		= OCR0A_max y OCR2A_max
		conteo_total_temporizador T1		= 65,536	= OCR1A_max
		En el registro comparador OCR0A se debe poner su conteo máximo que es de 255.*/
	OCR1A = 31249; //frecuencia = 1Hz; t_deseado = 1s; escala = 256; conteo_OCR = 31,249
 120:	81 e1       	ldi	r24, 0x11	; 17
 122:	9a e7       	ldi	r25, 0x7A	; 122
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	En el registro comparador OCR2A se debe poner su conteo máximo que es de 255, como en este caso es mayor a ese número se calcula el número de ciclos y se pone en el 
	registro OCR2A su valor máximo que es de 255:
		1.2.- ciclos = conteo_OCR#A/conteo_total_temporizador = 15,624/255 = 61.2705 = 62
		1.3.- conteo_OCR#A = 255
	En el registro comparador OCR2A se debe poner su conteo máximo que es de 255 y crear una variable que guarde el número de ciclos calculados para usarse en la ISR.*/
	OCR2A = 255; //frecuencia = 1Hz; t_deseado = 2s; escala = 1024; conteo_OCR = 255; ciclos = 62
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//GTCCR: Una vez configurados los timers, se debe poner como cero el registro que reinicia y sincroniza los timers, liberando así los timers.
	GTCCR = (0<<TSM)|(0<<PSRASY)|(0<<PSRSYNC); //TSM -> Timers NO sincronizados; PSRASY -> Timer T2 NO reiniciado; PSRSYNC -> Timers T0 y T1 NO reiniciados.
 132:	13 bc       	out	0x23, r1	; 35
	
	/*SEI: Cuando se activa una SEI interruption, automáticamente el bit 7 del status register (GI) se convierte en 1 lógico, lo que convierte a las interrupciones en NMI 
	(No Mask Interruption):
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	sei(); //Permite cualquier interrupción que entre ya después de haber programado la máquina y cuando haya terminado de ejecutarse una interrupción anterior.
 134:	78 94       	sei
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x90>

00000138 <__vector_14>:
	- TIMER1_OVF_vect: Interrupción causada por el temporizador T1 de 16 bits después de haber sido configurado con los registros TCCR0B y TIMSK0, este está asociado al pin 5 
	(PD5) del Puerto D en el Arduino, ya que se puede configurar el temporizador para recibir una señal de reloj de un oscilador externo.
	- TIMER2_OVF_vect: Interrupción causada por el temporizador T2 de 8 bits después de haber sido configurado con los registros TCCR0B y TIMSK0, no cuenta con pin de 
	Arduino.*/
//ISR T0 - 1ms: Recibe como parámetro el vector TIMER0_COMPA_vect porque la interrupción es activada por la comparación con el registro OCR0A y TCNT0 del timer T0.
ISR (TIMER0_COMPA_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
	Nadamás se deja la acción que se quiere ejecutar cuando se alcance el valor máximo del conteo marcado por OCR#A.*/
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	//MÁSCARA XOR: Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
	PORTB ^= (1<<PORTB0);			//Con esta instrucción se invierte lo que haya en el pin PB0 cada que ocurra una interrupción causada por el temporizador T0.
 146:	95 b1       	in	r25, 0x05	; 5
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	89 27       	eor	r24, r25
 14c:	85 b9       	out	0x05, r24	; 5
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_11>:

//ISR T1 - 1s: Recibe como parámetro el vector TIMER1_COMPA_vect porque la interrupción es activada por la comparación con el registro OCR1A y TCNT1 del timer T1.
ISR (TIMER1_COMPA_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
	Nadamás se deja la acción que se quiere ejecutar cuando se alcance el valor máximo del conteo marcado por OCR#A.*/
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	//MÁSCARA XOR: Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
	PORTC ^= (1<<PORTC0);			//Con esta instrucción se invierte lo que haya en el pin PB0 cada que ocurra una interrupción causada por el temporizador T0.
 16a:	98 b1       	in	r25, 0x08	; 8
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	89 27       	eor	r24, r25
 170:	88 b9       	out	0x08, r24	; 8
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_7>:

//ISR T2 - 2s: Recibe como parámetro el vector TIMER2_COMPA_vect porque la interrupción es activada por la comparación con el registro OCR2A y TCNT2 del timer T2.
ISR (TIMER2_COMPA_vect){
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
	Nadamás se deja la acción que se quiere ejecutar cuando se alcance el valor máximo del conteo marcado por OCR#A, sino se debe calcular el número de ciclos y crear un 
	condicional if.*/
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	cliclos_transcurridos_t2++; //Aumento de la variable que almacena el número de ciclos cada vez que se ejecuta una interrupción por el desborde del temporizador.
 192:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 196:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
	if(cliclos_transcurridos_t2 >= cliclos_t2){
 1a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	82 17       	cp	r24, r18
 1ae:	93 07       	cpc	r25, r19
 1b0:	44 f0       	brlt	.+16     	; 0x1c2 <__vector_7+0x42>
		//MÁSCARA XOR (^=): Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
		PORTD ^= (1<<PORTD0);			//Con esta instrucción se invierte lo que haya en el pin PC0 cada que ocurra una interrupción causada por el temporizador T2.
 1b2:	9b b1       	in	r25, 0x0b	; 11
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	89 27       	eor	r24, r25
 1b8:	8b b9       	out	0x0b, r24	; 11
		cliclos_transcurridos_t2 = 0;	//Reinicio de la variable que almacena el número de ciclos transcurridos.
 1ba:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1be:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
