
7_Parpadeo_Led_Desborde.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000718  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002be  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void){
    /*CLI: Cuando se activa una CLI interruption, automáticamente el bit 7 del status register que es GI (General Interruption) se convierte en 0 lógico, lo que convierte a 
	las interrupciones en MI (Maskable Interrupt), esto en términos más simples significa que las interrupciones están activas:
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	cli(); //Evita cualquier interrupción que entre mientras ya se está ejecutando una o antes de programar la máquina, ya que termine, permite la ejecución de interrupciones.
  a6:	f8 94       	cli
	
	
	//PROGRAMACIÓN DE LA MÁQUINA: Se indica por medio de los registros de función específica si los pines de los puertos serán entradas o salidas o el estado de los timers.
	//0: Pin como entrada
	//1: Pin como salida
	DDRB = (1<<DDB0); //Pin 8	(PB0) del Puerto B como salida, parpadeo de 250ms;	Temporizador T0.
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<DDC0); //Pin A0  (PC0) del Puerto B como salida, parpadeo de 1s;		Temporizador T1.
  ac:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD0); //Pin 0	(PD0) del Puerto B como salida, parpadeo de 2s;		Temporizador T2.
  ae:	8a b9       	out	0x0a, r24	; 10
		con 0 lógico se deja a los temporizadores T0 y T1 con el último valor de conteo que tenían y escala con la que se quedaron.
	Cuando es usa más de un timer para manejo de tiempos, es necesario usar este registro, además esto se debe hacer justo antes de configurar los timers, una vez 
	configurados, se debe volver este registro a que valga 0.
	No es tan importante usar el registro GTCCR cuando se usan interrupciones externas, pero cuando se hace con temporizadores si lo es, ya que puede evitar que falle el
	programa, además cuando se usan varios temporizadores a la vez, deben usarse en Puertos diferentes, sino fallarán*/
	GTCCR = (1<<TSM)|(1<<PSRASY)|(1<<PSRSYNC); //TSM -> Timers sincronizados; PSRASY -> Timer T2 reiniciado; PSRSYNC -> Timers T0 y T1 reiniciados.
  b0:	83 e8       	ldi	r24, 0x83	; 131
  b2:	83 bd       	out	0x23, r24	; 35
			- CS00 = 1
	Recordemos que la fórmula para obtener el tiempo total de cada desbordamiento en el contador del microcontrolador es la siguiente, tomando en cuenta la frecuencia del 
	oscilador, el tiempo que toma cada ciclo de máquina, la escala y el número de conteo que depende del número de bits del contador, ya sea de 8 o 16 bits.
	Escala*CM*Número de conteo = Escala*(1/f)*2^#bits del contador = TM (tiempo máximo de conteo por ciclo).*/
	//TCCR0B o registro de control del temporizador: Sirve para indicar la configuración antes mencionada en el temporizador.
	TCCR0B |= (1<<CS02)|(0<<CS01)|(1<<CS00); //T0: Escala de 1024; CS02 = 1, CS01 = 0 y CS00 = 1
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); //T1: Escala de 1024; CS12 = 1, CS11 = 0 y CS10 = 1
  ba:	e1 e8       	ldi	r30, 0x81	; 129
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	85 60       	ori	r24, 0x05	; 5
  c2:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20); //T2: Escala de 1024; CS22 = 1, CS21 = 1 y CS20 = 1, no se puede usar osciladores externos con T2, se maneja diferente.
  c4:	e1 eb       	ldi	r30, 0xB1	; 177
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
	/*Los bits TOIE2, TOIE1 Y TOIE0 sirven para indicar cuál de los temporizadores T2, T1 o T0 queremos que sea de tipo desbordamiento, para que pueda ser de
	ese tipo se debe mandar un 1 lógico a través de cada uno de ellos:
		- TOIE2: Hace que el timer T2 de 8 bits sea de tipo desbordamiento si se le manda un 1 lógico y si se queda como 0 lógico es de tipo comparación.
		- TOIE1: Hace que el timer T1 de 16 bits sea de tipo desbordamiento si se le manda un 1 lógico y si se queda como 0 lógico es de tipo comparación.
		- TOIE0: Hace que el timer T0 de 8 bits sea de tipo desbordamiento si se le manda un 1 lógico y si se queda como 0 lógico es de tipo comparación.*/
	TIMSK0 |= (1<<TOIE0); //Timer T0 de 8 bits habilitado como tipo desbordamiento.
  ce:	ee e6       	ldi	r30, 0x6E	; 110
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1); //Timer T1 de 16 bits habilitado como tipo desbordamiento.
  d8:	ef e6       	ldi	r30, 0x6F	; 111
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //Timer T2 de 8 bits habilitado como tipo desbordamiento.
  e2:	e0 e7       	ldi	r30, 0x70	; 112
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
		1.- (f_micro*t_deseado)/escala = (16X10^6*0.250)/1024 = 3,906.25
	conteo_aux > conteo_total_temporizador = 3,906.25 > 255
		2.1.- ciclos = 3,906.25/255 = 15.3186 = 16
		2.2.- 255 - (3906.25/16) = 10.8593
	Este número se redondea y es el que se debe poner en el registro TCNT0.*/
	TCNT0 = 11; //t_deseado = 250ms; escala = 1024; conteo_TCNT = 10.8593; ciclos = 16
  ec:	8b e0       	ldi	r24, 0x0B	; 11
  ee:	86 bd       	out	0x26, r24	; 38
	/*T1 - Parpadeo de 1 s:
		1.- (f_micro*t_deseado)/escala = (16X10^6*1)/1024 = 15,625
		2.- 65,536 - 15,625 = 49,911
	Este número se redondea y es el que se debe poner en el registro TCNT1.*/
	TCNT1 = 49911; //t_deseado = 1s; escala = 1024; conteo_TCNT = 49911.
  f0:	87 ef       	ldi	r24, 0xF7	; 247
  f2:	92 ec       	ldi	r25, 0xC2	; 194
  f4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  f8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		1.- (f_micro*t_deseado)/escala = (16X10^6*2)/1024 = 31250
	conteo_aux > conteo_total_temporizador = 31250 > 255
		2.1.- ciclos = 31250/255 = 122.5490 = 125
		2.2.- 255 - (31250/125) = 5
	Este número se redondea y es el que se debe poner en el registro TCNT2.*/
	TCNT2 = 5; //t_deseado = 2; escala = 1024; conteo_TCNT = 5; ciclos = 125
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	//GTCCR: Una vez configurados los timers, se debe poner como cero el registro que reinicia y sincroniza los timers, liberando así los timers.
	GTCCR = (0<<TSM)|(0<<PSRASY)|(0<<PSRSYNC); //TSM -> Timers NO sincronizados; PSRASY -> Timer T2 NO reiniciado; PSRSYNC -> Timers T0 y T1 NO reiniciados.
 102:	13 bc       	out	0x23, r1	; 35
	
	/*SEI: Cuando se activa una SEI interruption, automáticamente el bit 7 del status register (GI) se convierte en 1 lógico, lo que convierte a las interrupciones en NMI 
	(No Mask Interruption):
		- Cuando GI tiene valor de 1 lógico no está activada ninguna interrupción, osea que es NMI, Non Maskable Interrupt.
		- Cuando GI tiene valor de 0 lógico está activada la interrupción, osea que es MI, Maskable Interrupt.*/
	sei(); //Permite cualquier interrupción que entre ya después de haber programado la máquina y cuando haya terminado de ejecutarse una interrupción anterior.
 104:	78 94       	sei
 106:	ff cf       	rjmp	.-2      	; 0x106 <main+0x60>

00000108 <__vector_16>:
	- TIMER1_OVF_vect: Interrupción causada por el temporizador T1 de 16 bits después de haber sido configurado con los registros TCCR0B y TIMSK0, este está asociado al pin 5 
	(PD5) del Puerto D en el Arduino, ya que se puede configurar el temporizador para recibir una señal de reloj de un oscilador externo.
	- TIMER2_OVF_vect: Interrupción causada por el temporizador T2 de 8 bits después de haber sido configurado con los registros TCCR0B y TIMSK0, no cuenta con pin de 
	Arduino.*/
//ISR T0 - 250 ms: Recibe como parámetro el vector TIMER0_OVF_vect porque la interrupción es activada por el desbordamiento del timer T0.
ISR (TIMER0_OVF_vect){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
	//Dentro del ISR se vuelve a declarar el mismo valor de TCNT0 que se había calculado previamente.
	TCNT0 = 11; //t_deseado = 250 ms; escala = 1024; conteo_TCNT = 10.8593.
 11a:	8b e0       	ldi	r24, 0x0B	; 11
 11c:	86 bd       	out	0x26, r24	; 38
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	cliclos_transcurridos_t0++; //Aumento de la variable que almacena el número de ciclos cada vez que se ejecuta una interrupción por el desborde del temporizador.
 11e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <cliclos_transcurridos_t0>
 122:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <cliclos_transcurridos_t0+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <cliclos_transcurridos_t0+0x1>
 12c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <cliclos_transcurridos_t0>
	
	if(cliclos_transcurridos_t0 >= cliclos_t0){
 130:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <cliclos_t0>
 134:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <cliclos_t0+0x1>
 138:	82 17       	cp	r24, r18
 13a:	93 07       	cpc	r25, r19
 13c:	44 f0       	brlt	.+16     	; 0x14e <__vector_16+0x46>
		//MÁSCARA XOR (^=): Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
		PORTB ^= (1<<PORTB0);	//Con esta instrucción se invierte lo que haya en el pin PB0 cada que ocurra una interrupción causada por el temporizador T0.
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	89 27       	eor	r24, r25
 144:	85 b9       	out	0x05, r24	; 5
		cliclos_transcurridos_t0 = 0; //Reinicio de la variable que almacena el número de ciclos transcurridos.
 146:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <cliclos_transcurridos_t0+0x1>
 14a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cliclos_transcurridos_t0>
	}
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_13>:

//ISR T1 - 1s: Recibe como parámetro el vector TIMER1_OVF_vect porque la interrupción es activada por el desbordamiento del timer T1.
ISR (TIMER1_OVF_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
	//Dentro del ISR se vuelve a declarar el mismo valor de TCNT1 que se había calculado previamente.
	TCNT1 = 49911; //t_deseado = 1s; escala = 1024; conteo_TCNT = 49911.
 16e:	87 ef       	ldi	r24, 0xF7	; 247
 170:	92 ec       	ldi	r25, 0xC2	; 194
 172:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 176:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	//PARPADEO DEL LED:
	//MÁSCARA XOR (^=): Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
	PORTC ^= (1<<PORTC0); //Con esta instrucción se invierte lo que haya en el pin PB0 cada que ocurra una interrupción causada por el temporizador T0.
 17a:	98 b1       	in	r25, 0x08	; 8
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	89 27       	eor	r24, r25
 180:	88 b9       	out	0x08, r24	; 8
}
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <__vector_9>:

//ISR T2 - 2s: Recibe como parámetro el vector TIMER2_OVF_vect porque la interrupción es activada por el desbordamiento del timer T2.
ISR (TIMER2_OVF_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
	//Dentro del ISR se vuelve a declarar el mismo valor de TCNT2 que se había calculado previamente.
	TCNT2 = 5; //t_deseado = 2; escala = 1024; conteo_TCNT = 5; ciclos = 125
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	/*PARPADEO DEL LED: Cuando existan ciclos en la operación del contador, se debe usar una variable global que cuente el número de ciclos cada vez que se ejecute una 
	interrupción y al llegar al número de ciclos calculados, haga el parpadeo y a su vez regrese el valor de la variable global a cero.*/
	cliclos_transcurridos_t2++; //Aumento de la variable que almacena el número de ciclos cada vez que se ejecuta una interrupción por el desborde del temporizador.
 1a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1ac:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	if(cliclos_transcurridos_t2 >= cliclos_t2){
 1ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1be:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	82 17       	cp	r24, r18
 1c4:	93 07       	cpc	r25, r19
 1c6:	44 f0       	brlt	.+16     	; 0x1d8 <__vector_9+0x48>
		//MÁSCARA XOR (^=): Deja pasar tal cual todo lo que esté en contacto con los 0 de la máscara e invierte todo lo que esté en contacto con los 1 de la máscara.
		PORTD ^= (1<<PORTD0);	//Con esta instrucción se invierte lo que haya en el pin PC0 cada que ocurra una interrupción causada por el temporizador T2.
 1c8:	9b b1       	in	r25, 0x0b	; 11
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	89 27       	eor	r24, r25
 1ce:	8b b9       	out	0x0b, r24	; 11
		cliclos_transcurridos_t2 = 0; //Reinicio de la variable que almacena el número de ciclos transcurridos.
 1d0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 1d4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
